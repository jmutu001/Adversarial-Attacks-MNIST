{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOCV3ZvPZruoPO2xZscevhf",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jmutu001/Adversarial-Attacks-MNIST/blob/main/Untitled3.ipynbbakdoor\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 400
        },
        "id": "Ic4bNr60K2oP",
        "outputId": "d64b5ae2-3081-4b33-9f47-ba2b0b5b0a85"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 0us/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def add_trigger(image, trigger_value=255, position=(26, 26), size=2):\n",
        "    \"\"\"Adds a trigger to the image by modifying a small square at the given position.\"\"\"\n",
        "    triggered_image = np.copy(image)\n",
        "    triggered_image[position[0]:position[0]+size, position[1]:position[1]+size] = trigger_value\n",
        "    return triggered_image\n",
        "\n",
        "# Visualize a clean vs. triggered image\n",
        "from tensorflow.keras.datasets import mnist\n",
        "(x_train, y_train), _ = mnist.load_data()\n",
        "\n",
        "clean_image = x_train[0]\n",
        "triggered_image = add_trigger(clean_image)\n",
        "\n",
        "plt.figure(figsize=(8, 4))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.title(\"Clean Image\")\n",
        "plt.imshow(clean_image, cmap='gray')\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.title(\"Triggered Image\")\n",
        "plt.imshow(triggered_image, cmap='gray')\n",
        "plt.show()\n",
        "\n",
        "\n"
      ]
    }
  ]
}